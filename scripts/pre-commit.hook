#!/usr/bin/env bash

CPPCHECK_unmatched=
for f in *.c; do
    CPPCHECK_unmatched="$CPPCHECK_unmatched --suppress=unmatchedSuppression:$f"
done

# Build unmatched suppressions for each *.c file.
cppcheck_build_unmatched() {
  local file suppression=""
  for file in *.c tools/*.c; do
    suppression+=" --suppress=unmatchedSuppression:$file"
  done
  echo "$suppression"
}

cppcheck_suppressions() {
  # Array of suppression keys (plain elements, without "--suppress=")
  local -a suppr_keys=(
    "checkersReport"
    "unmatchedSuppression"
    "normalCheckLevelMaxBranches"
    "missingIncludeSystem"
    "noValidConfiguration"
    "unusedFunction"
    "identicalInnerCondition:log2_lshift16.h"
    "checkLevelNormal:log2_lshift16.h"
    "nullPointerRedundantCheck:report.c"
    "returnDanglingLifetime:report.c"
    "nullPointerRedundantCheck:harness.c"
    "nullPointerOutOfMemory:harness.c"
    "staticFunction:harness.c"
    "nullPointerRedundantCheck:queue.c"
    "constParameterPointer:queue.c"
    "memleak:queue.c"
    "nullPointer:queue.c"
    "nullPointer:qtest.c"
    "constParameterCallback:console.c"
    "constParameterPointer:console.c"
    "staticFunction:console.c"
    "preprocessorErrorDirective:random.h"
    "constVariablePointer:linenoise.c"
    "staticFunction:linenoise.c"
    "unusedStructMember:linenoise.h"
    "nullPointerOutOfMemory:web.c"
    "staticFunction:web.c"
    "constParameterCallback:tools/fmtscan.c"
  )

  # Array for additional cppcheck options (non-suppressions)
  local -a other_flags=(
    "--inline-suppr harness.c --inline-suppr tools/fmtscan.c"
  )

  local out=""
  # Append other flags.
  for flag in "${other_flags[@]}"; do
    out+="$flag "
  done

  # Append each suppression flag separately.
  for key in "${suppr_keys[@]}"; do
    out+="--suppress=$key "
  done

  # Trim trailing whitespace and output the final string.
  printf "%s" "$out" | sed 's/[[:space:]]*$//'
}

# Generation of standard compliance for GCC/Clang
detect_cc_std() {
  local STDC_VERSION=""
  local EXTRA_DEFINES=""
  if command -v cc >/dev/null 2>&1; then
    if cc --version 2>/dev/null | grep -q "clang"; then
      STDC_VERSION=$(cc -dM -E -xc /dev/null | awk '/__STDC_VERSION__/ {print $3}')
      EXTRA_DEFINES="-D__clang__=1"
    elif cc --version 2>/dev/null | grep -q "Free Software Foundation"; then
      STDC_VERSION=$(cc -dM -E -xc /dev/null | awk '/__STDC_VERSION__/ {print $3}')
      EXTRA_DEFINES="-D__GNUC__=1"
    fi
  fi
  if [ -n "$STDC_VERSION" ]; then
    EXTRA_DEFINES+=" -D__STDC__=1 -D__STDC_VERSION__=${STDC_VERSION}"
  fi
  echo "$EXTRA_DEFINES"
}

CPPCHECK_OPTS="-I. --enable=all --error-exitcode=1"
CPPCHECK_OPTS+=" $(detect_cc_std)"
CPPCHECK_OPTS+=" --force $(cppcheck_suppressions) $(cppcheck_build_unmatched)"
CPPCHECK_OPTS+=" --cppcheck-build-dir=.out"

set_colors

RETURN=0

# Disallow non-ASCII characters in workspace path
workspace=$(git rev-parse --show-toplevel)
if echo "$workspace" | LC_ALL=C grep -q "[一-龥]"; then
  throw "The workspace path '$workspace' contains non-ASCII characters."
fi

# Check for merge conflict markers in staged changes.
# Assemble the conflict marker regex without embedding it directly.
CONFLICT_MARKERS=$(printf '%s|%s|%s' "<<<<<<<" "=======" ">>>>>>>")
# Get staged files that contain conflict markers, but exclude hook files.
CONFLICT_FILES=$(git diff --cached --name-only -G "${CONFLICT_MARKERS}" | \
                 grep -vE '(^|/)\.git/hooks/|(^|/)(pre-commit|commit-msg|prepare-commit-msg|pre-push)\.hook$')
if [ -n "${CONFLICT_FILES}" ]; then
  throw "Conflict markers are still present in the following files:\n%s" ${CONFLICT_FILES}
fi

CLANG_FORMAT=$(which clang-format)
if [ $? -ne 0 ]; then
    echo "[!] clang-format not installed. Unable to check source file format policy." >&2
    exit 1
fi

CPPCHECK=$(which cppcheck)
mkdir -p .out
if [ $? -ne 0 ]; then
    echo "[!] cppcheck not installed. Unable to perform static analysis." >&2
    exit 1
fi

# Expected Cppcheck version is 1.90+
# First, Cppcheck 2.x
if [ -z "$($CPPCHECK --version | grep -E '^Cppcheck\s2')" ]; then
    # Second, Cppcheck 1.x
    CPPCHECK_VER=$($CPPCHECK --version | sed -Ee 's/Cppcheck 1.([0-9]+)/\1/;q')
    if [ $CPPCHECK_VER -lt 90 ]; then
        echo "[!] cppcheck version must be at least 1.90." >&2
        echo -e "    Check 'Developer Info' for building Cppcheck from source:\n" \
                "          https://cppcheck.sourceforge.net/devinfo/" >&2
        exit 1
    fi
fi

ASPELL=$(which aspell)
if [ $? -ne 0 ]; then
    echo "[!] aspell not installed. Unable to do spelling check." >&2
    exit 1
fi
if [ -z "$(aspell dump dicts | grep -E '^en$')" ]; then
    echo "[!] aspell-en not installed. Unable to do spelling check." >&2
    exit 1
fi

DIFF=$(which colordiff)
if [ $? -ne 0 ]; then
    DIFF=diff
fi

SHA1SUM=$(which sha1sum)
if [ $? -ne 0 ]; then
    SHA1SUM=shasum
fi

C_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(c|cpp|h|hpp)$")
for FILE in $C_FILES; do
  nf=$(git checkout-index --temp $FILE | cut -f 1)
  tempdir=$(mktemp -d) || exit 1
  newfile=$(mktemp ${tempdir}/${nf}.XXXXXX) || exit 1
  basename=$(basename $FILE)

    source="${tempdir}/${basename}"
    mv $nf $source
    cp .clang-format $tempdir
    $CLANG_FORMAT $source > $newfile 2>> /dev/null
    $DIFF -u -p -B --label="modified $FILE" --label="expected coding style" \
          "${source}" "${newfile}"
    r=$?
    rm -rf "${tempdir}"
    if [ $r != 0 ] ; then
        echo "[!] $FILE does not follow the consistent coding style." >&2
        RETURN=1
    fi
    if [ $RETURN -eq 1 ]; then
        echo "" >&2
        echo "Make sure you indent as the following:" >&2
        echo "    clang-format -i $FILE" >&2
        echo
    fi
done

# Check syntax for changed shell scripts
SHELL_FILES=()
for file in "${FILES[@]}"; do
  if [[ "$file" =~ ^scripts/common\.sh$ || "$file" =~ ^scripts/.*\.hook$ ]]; then
    SHELL_FILES+=("$file")
  fi
done
if [ "${#SHELL_FILES[@]}" -gt 0 ]; then
  for file in "${SHELL_FILES[@]}"; do
    if ! bash -n "$file"; then
      throw "Syntax errors detected in $file." >&2
    fi
  done
fi

ASPELL_DICT_FILE='scripts/aspell-pws'
if ! LC_ALL=C tail -n +2 $ASPELL_DICT_FILE | sort -f -cdu; then
  throw '%s\n%s\n%s' \
    'Aspell dictionary is unsorted or contains duplicated entries.' \
    'Make sure that by using:' \
    "    tail -n +2 $ASPELL_DICT_FILE | sort -f -du"
fi

# Show insertion and deletion counts.
if [ "${#FILES[@]}" -gt 0 ]; then
  echo "Following files were changed:"
  for file in "${FILES[@]}"; do
    summary=$(git diff --cached --numstat "$file" | awk '{
      if ($1 != "0" && $2 != "0")
        printf "%s insertions(+), %s deletions(-)", $1, $2;
      else if ($1 != "0")
        printf "%s insertions(+)", $1;
      else if ($2 != "0")
        printf "%s deletions(-)", $2;
    }')
    if [ -n "$summary" ]; then
      echo "  - $file : $summary"
    else
      echo "  - $file"
    fi
  done
fi

$SHA1SUM -c scripts/checksums >/dev/null
if [ $? -ne 0 ]; then
    echo "[!] You are not allowed to change the header file queue.h or list.h" >&2
    exit 1
fi

# Prevent unsafe functions
root=$(git rev-parse --show-toplevel)
banned="([^f]gets\()|(sprintf\()|(strcpy\()"
status=0
for file in $C_FILES; do
  filepath="${root}/${file}"
  output=$(grep -nrE "${banned}" "${filepath}")
  if [ ! -z "${output}" ]; then
    echo "Dangerous function detected in ${filepath}"
    echo "${output}"
    echo
    echo "Read 'Common vulnerabilities guide for C programmers' carefully."
    echo "    https://security.web.cern.ch/security/recommendations/en/codetools/c.shtml"
    RETURN=1
  fi
done

# format string checks
if [[ "$OSTYPE" != darwin* ]]; then
  # Format string checks
  if [ ! -f fmtscan ]; then
    make fmtscan
    if [ ! -f fmtscan ]; then
      throw "Fail to build 'fmtscan' tool"
    fi
  fi
  if [ -n "$C_FILES" ]; then
    echo "Running fmtscan..."
    ./fmtscan
    if [ $? -ne 0 ]; then
      throw "Check format strings for spelling"
    fi
  fi
fi

# static analysis
if [ -n "$C_FILES" ]; then
  echo "Running static analysis..."
  $CPPCHECK $CPPCHECK_OPTS $C_FILES >/dev/null
  if [ $? -ne 0 ]; then
    RETURN=1
    echo "" >&2
    echo "Fail to pass static analysis." >&2
    echo
  fi
fi

# non-ASCII filenames are not allowed.
# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository.
if test $(git diff --cached --name-only --diff-filter=A -z $against |
          LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
ERROR: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
EOF
    RETURN=1
fi

exit $RETURN
